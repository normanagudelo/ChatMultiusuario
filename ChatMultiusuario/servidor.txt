
import java.net.*;
import java.io.*;
import java.util.Scanner;

public class Servidor {

    private Socket socket;
    private ServerSocket serverSocket;
    private DataInputStream datosentrada = null;
    private DataOutputStream datossalida = null;
    Scanner escaner = new Scanner(System.in);

    public void CONNECT(int puerto) {
        try {
            serverSocket = new ServerSocket(puerto);
            System.out.println("Esperando conexi贸n entrante en el puerto " + String.valueOf(puerto) + "...");
            socket = serverSocket.accept();
            System.out.println("Conexi贸n establecida con: " + socket.getInetAddress().getHostName() + "\n\n\n");
        } catch (IOException e) {
            System.out.println("Error en levantarConexion(): " + e.getMessage());
            System.exit(0);
        }
    }

    public void FLUX() {
        try {
            datosentrada = new DataInputStream(socket.getInputStream());
            datossalida = new DataOutputStream(socket.getOutputStream());
            datossalida.flush();
        } catch (IOException e) {
            System.out.println("Error en la apertura de flujos");
        }
    }

    public void DATAGET() {
        String st = "";
        try {
            do {
                st = (String) datosentrada.readUTF();
                System.out.print(st + "\n\n");
                //System.out.print("\n[Servido] >>> ");
            } while (!st.equals("salir()"));
        } catch (IOException e) {
            System.out.println("Error en recibirdatos");
        } finally {
            CLOSE();
        }
    }

    public void DATAWRITE() throws IOException {
        while (true) {
            System.out.print("[Servidor]: >>> ");
            String cadena = escaner.nextLine();
            datossalida.writeUTF("[Servidor]: <<< " + cadena);
            datossalida.flush();
        }
    }

    public void CLOSE() {
        try {
            datosentrada.close();
            datossalida.close();
            socket.close();
        } catch (IOException e) {
           System.out.println("Excepci贸n en cerrarConexion(): " + e.getMessage());
        } finally {
            System.out.println("Conversaci贸n finalizada....");
            System.exit(0);

        }
    }

    public void RUNNER(int puerto) {
        Thread hilo = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        CONNECT(puerto);
                        FLUX();
                        DATAGET();
                    } finally {
                        CLOSE();
                    }
                }
            }
        });
        hilo.start();
    }

    public static void main(String[] args) throws IOException {
        Servidor s = new Servidor();
        Scanner sc = new Scanner(System.in);

        System.out.println("Ingresa el puerto : ");
        String puerto = sc.nextLine();
        

        if (puerto.length() <= 0) { puerto = "1000";        }
        s.RUNNER(Integer.parseInt(puerto));
        s.DATAWRITE();
    }
}
